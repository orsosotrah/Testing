# .github/workflows/ci.yml
name: build-and-test
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_ASSISTANT_ID: ${{ secrets.OPENAI_ASSISTANT_ID }}
    steps:
      - uses: actions/checkout@v3
      
      # Create logs directory at the beginning of the workflow
      - name: Create logs directory
        run: mkdir -p logs
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: |
          # Run tests and capture output
          dotnet test --no-build --verbosity normal | tee logs/test_output.log
          TEST_EXIT_CODE=${PIPESTATUS[0]}
          # Add explicit information about test failures
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "Tests failed with exit code $TEST_EXIT_CODE" | tee -a logs/test_output.log
            exit $TEST_EXIT_CODE
          fi
      
      - name: Analyze failure with GPT
        if: failure()
        run: |
          # Ensure logs directory exists again (in case the job was restarted)
          mkdir -p logs
          
          echo "Running GPT analysis..."
          # Create gpt_input.txt file with basic information
          echo "### CI Logs" > logs/gpt_input.txt
          echo "Build failed in GitHub Actions" >> logs/gpt_input.txt
          
          # Check if test_output.log exists and has content
          if [ -f logs/test_output.log ] && [ -s logs/test_output.log ]; then
            echo "Found test_output.log, adding content to analysis" | tee -a logs/gpt_input.txt
            echo "--- Test Output Log Content ---" >> logs/gpt_input.txt
            tail -n 1000 logs/test_output.log >> logs/gpt_input.txt
          else
            echo "Error: test_output.log file not found or empty" | tee -a logs/gpt_input.txt
            # Try to find any useful information from the workflow
            echo "--- Attempting to gather build information ---" >> logs/gpt_input.txt
            find . -name "*.binlog" -o -name "*.log" | xargs ls -la >> logs/gpt_input.txt 2>/dev/null || echo "No log files found"
            echo "Current directory content:" >> logs/gpt_input.txt
            ls -la >> logs/gpt_input.txt
            ls -la logs >> logs/gpt_input.txt 2>/dev/null || echo "logs directory not found"
          fi
          
          # Create thread
          THREAD_RESPONSE=$(curl -s -X POST https://api.openai.com/v1/threads \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            -H "Content-Type: application/json" \
            -d '{}')
          
          if [ -z "$THREAD_RESPONSE" ]; then
            echo "Error: Empty response from OpenAI when creating thread"
            exit 1
          fi
          
          THREAD_ID=$(echo $THREAD_RESPONSE | jq -r '.id')
          
          if [ -z "$THREAD_ID" ] || [ "$THREAD_ID" = "null" ]; then
            echo "Error: Failed to get thread ID from response"
            echo "Response: $THREAD_RESPONSE"
            exit 1
          fi
          
          # Add message to thread
          MESSAGE_RESPONSE=$(curl -s -X POST https://api.openai.com/v1/threads/$THREAD_ID/messages \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            -H "Content-Type: application/json" \
            -d "{\"role\": \"user\", \"content\": $(cat logs/gpt_input.txt | jq -Rs .)}")
          
          # Create run
          RUN_RESPONSE=$(curl -s -X POST https://api.openai.com/v1/threads/$THREAD_ID/runs \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            -H "Content-Type: application/json" \
            -d '{
              "assistant_id": "'$OPENAI_ASSISTANT_ID'", 
              "instructions": "Kamu adalah asisten AI DevOps. Kamu membantu menganalisis log CI/CD dari GitHub Actions dan menjelaskan kesalahan dengan jelas. Kamu juga menyarankan apa yang mungkin salah dan bagaimana cara memperbaikinya.", 
              "tools": [{"type": "code_interpreter"}]
            }')
          
          if [ -z "$RUN_RESPONSE" ]; then
            echo "Error: Empty response from OpenAI when creating run"
            exit 1
          fi
          
          RUN_ID=$(echo $RUN_RESPONSE | jq -r '.id')
          
          if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
            echo "Error: Failed to get run ID from response"
            echo "Response: $RUN_RESPONSE"
            exit 1
          fi
          
          echo "Waiting for GPT run to complete..."
          
          # Add timeout to prevent infinite loop
          TIMEOUT=300  # 5 minutes
          START_TIME=$(date +%s)
          
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED_TIME -gt $TIMEOUT ]; then
              echo "Timeout waiting for GPT run to complete after $TIMEOUT seconds"
              break
            fi
            
            STATUS_RESPONSE=$(curl -s -X GET https://api.openai.com/v1/threads/$THREAD_ID/runs/$RUN_ID \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "OpenAI-Beta: assistants=v2")
            
            if [ -z "$STATUS_RESPONSE" ]; then
              echo "Error: Empty response when checking run status"
              sleep 5
              continue
            fi
            
            STATUS=$(echo $STATUS_RESPONSE | jq -r '.status')
            
            if [ -z "$STATUS" ] || [ "$STATUS" = "null" ]; then
              echo "Error: Failed to get status from response"
              echo "Response: $STATUS_RESPONSE"
              sleep 5
              continue
            fi
            
            echo "Current status: $STATUS"
            
            if [ "$STATUS" = "completed" ]; then
              break
            elif [ "$STATUS" = "failed" ] || [ "$STATUS" = "cancelled" ] || [ "$STATUS" = "expired" ]; then
              echo "GPT run $STATUS"
              break
            fi
            
            sleep 5
          done
          
          if [ "$STATUS" = "completed" ]; then
            echo "Fetching GPT response..."
            MESSAGES_RESPONSE=$(curl -s -X GET https://api.openai.com/v1/threads/$THREAD_ID/messages \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "OpenAI-Beta: assistants=v2")
            
            if [ -z "$MESSAGES_RESPONSE" ]; then
              echo "Error: Empty response when fetching messages"
              exit 1
            fi
            
            ANALYSIS=$(echo $MESSAGES_RESPONSE | jq -r '.data[0].content[0].text.value')
            
            if [ -z "$ANALYSIS" ] || [ "$ANALYSIS" = "null" ]; then
              echo "Error: Failed to extract analysis from response"
              echo "Response: $MESSAGES_RESPONSE"
              exit 1
            fi
            
            echo "GPT Analysis:"
            echo "$ANALYSIS"
            echo "$ANALYSIS" > logs/gpt_analysis.txt
          else
            echo "GPT run did not complete successfully. Status: $STATUS"
          fi
      
      - name: Upload artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gpt-analysis
          path: logs/
          if-no-files-found: warn
