# .github/workflows/ci.yml
name: build-and-test
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_ASSISTANT_ID: ${{ secrets.OPENAI_ASSISTANT_ID }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: |
          dotnet test --no-build --verbosity normal | tee test_output.log
          TEST_EXIT_CODE=${PIPESTATUS[0]}
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "Tests failed with exit code $TEST_EXIT_CODE"
            exit $TEST_EXIT_CODE
          fi
      - name: Analyze failure with GPT
        if: failure()
        run: |
          echo "Running GPT analysis..."
          if [ -f test_output.log ]; then
            echo "### CI Logs" > gpt_input.txt
            tail -n 1000 test_output.log >> gpt_input.txt
            
            # Create thread
            THREAD_RESPONSE=$(curl -s -X POST https://api.openai.com/v1/threads \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "OpenAI-Beta: assistants=v2" \
              -H "Content-Type: application/json" \
              -d '{}')
            
            if [ -z "$THREAD_RESPONSE" ]; then
              echo "Error: Empty response from OpenAI when creating thread"
              exit 1
            fi
            
            THREAD_ID=$(echo $THREAD_RESPONSE | jq -r '.id')
            
            if [ -z "$THREAD_ID" ] || [ "$THREAD_ID" = "null" ]; then
              echo "Error: Failed to get thread ID from response"
              echo "Response: $THREAD_RESPONSE"
              exit 1
            fi
            
            # Add message to thread
            MESSAGE_RESPONSE=$(curl -s -X POST https://api.openai.com/v1/threads/$THREAD_ID/messages \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "OpenAI-Beta: assistants=v2" \
              -H "Content-Type: application/json" \
              -d "{\"role\": \"user\", \"content\": $(cat gpt_input.txt | jq -Rs .)}")
            
            # Create run
            RUN_RESPONSE=$(curl -s -X POST https://api.openai.com/v1/threads/$THREAD_ID/runs \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "OpenAI-Beta: assistants=v2" \
              -H "Content-Type: application/json" \
              -d '{
                "assistant_id": "'$OPENAI_ASSISTANT_ID'", 
                "instructions": "You are an AI DevOps assistant. You help analyze CI/CD logs from GitHub Actions and explain errors clearly. Suggest what might have gone wrong and how to fix it.", 
                "tools": [{"type": "code_interpreter"}]
              }')
            
            if [ -z "$RUN_RESPONSE" ]; then
              echo "Error: Empty response from OpenAI when creating run"
              exit 1
            fi
            
            RUN_ID=$(echo $RUN_RESPONSE | jq -r '.id')
            
            if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
              echo "Error: Failed to get run ID from response"
              echo "Response: $RUN_RESPONSE"
              exit 1
            fi
            
            echo "Waiting for GPT run to complete..."
            
            # Add timeout to prevent infinite loop
            TIMEOUT=300  # 5 minutes
            START_TIME=$(date +%s)
            
            while true; do
              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
              
              if [ $ELAPSED_TIME -gt $TIMEOUT ]; then
                echo "Timeout waiting for GPT run to complete after $TIMEOUT seconds"
                break
              fi
              
              STATUS_RESPONSE=$(curl -s -X GET https://api.openai.com/v1/threads/$THREAD_ID/runs/$RUN_ID \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v2")
              
              if [ -z "$STATUS_RESPONSE" ]; then
                echo "Error: Empty response when checking run status"
                sleep 5
                continue
              fi
              
              STATUS=$(echo $STATUS_RESPONSE | jq -r '.status')
              
              if [ -z "$STATUS" ] || [ "$STATUS" = "null" ]; then
                echo "Error: Failed to get status from response"
                echo "Response: $STATUS_RESPONSE"
                sleep 5
                continue
              fi
              
              echo "Current status: $STATUS"
              
              if [ "$STATUS" = "completed" ]; then
                break
              elif [ "$STATUS" = "failed" ] || [ "$STATUS" = "cancelled" ] || [ "$STATUS" = "expired" ]; then
                echo "GPT run $STATUS"
                break
              fi
              
              sleep 5
            done
            
            if [ "$STATUS" = "completed" ]; then
              echo "Fetching GPT response..."
              MESSAGES_RESPONSE=$(curl -s -X GET https://api.openai.com/v1/threads/$THREAD_ID/messages \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "OpenAI-Beta: assistants=v2")
              
              if [ -z "$MESSAGES_RESPONSE" ]; then
                echo "Error: Empty response when fetching messages"
                exit 1
              fi
              
              ANALYSIS=$(echo $MESSAGES_RESPONSE | jq -r '.data[0].content[0].text.value')
              
              if [ -z "$ANALYSIS" ] || [ "$ANALYSIS" = "null" ]; then
                echo "Error: Failed to extract analysis from response"
                echo "Response: $MESSAGES_RESPONSE"
                exit 1
              fi
              
              echo "GPT Analysis:"
              echo "$ANALYSIS"
              echo "$ANALYSIS" > gpt_analysis.txt
            else
              echo "GPT run did not complete successfully. Status: $STATUS"
            fi
          else
            echo "Error: test_output.log file not found"
          fi
      - name: Upload GPT Analysis Artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gpt-analysis
          path: |
            gpt_input.txt
            gpt_analysis.txt
            test_output.log
