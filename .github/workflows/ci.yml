# .github/workflows/ci-ultra-minimal.yml
name: build-and-test-minimal
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build
        run: dotnet build --no-restore
      
      - name: Test
        run: dotnet test --no-build --verbosity normal
      
      - name: Analyze failure with AI
        if: failure()
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "Collecting build information..."
          
          # Capture error context directly into a variable
          ERROR_CONTEXT="### CI Build Failure\n"
          ERROR_CONTEXT+="Repository: $GITHUB_REPOSITORY\n"
          ERROR_CONTEXT+="Workflow: $GITHUB_WORKFLOW\n"
          ERROR_CONTEXT+="Branch: $GITHUB_REF\n\n"
          
          # Find and include relevant files with errors
          ERROR_CONTEXT+="### Source Files with Potential Errors\n"
          for file in $(find . -name "*.cs" -type f -exec grep -l "error\|XXXX\|fail" {} \; 2>/dev/null || echo ""); do
            if [ -n "$file" ]; then
              ERROR_CONTEXT+="File: $file\n"
              ERROR_CONTEXT+="$(cat $file)\n\n"
            fi
          done
          
          SYSTEM_PROMPT="You are an AI DevOps assistant. Analyze CI/CD logs from GitHub Actions and explain errors clearly and concisely. Suggest potential fixes."
          
          # Determine which AI to use based on available keys
          if [ -n "$ANTHROPIC_API_KEY" ]; then
            echo "Using Claude API for analysis..."
            
            # Call Claude API with single call
            CLAUDE_RESPONSE=$(curl -s -X POST https://api.anthropic.com/v1/messages \
              -H "x-api-key: $ANTHROPIC_API_KEY" \
              -H "anthropic-version: 2023-06-01" \
              -H "content-type: application/json" \
              -d '{
                "model": "claude-3-haiku-20240307",
                "max_tokens": 1000,
                "system": "'"$SYSTEM_PROMPT"'",
                "messages": [
                  {
                    "role": "user",
                    "content": "'"${ERROR_CONTEXT//$'\n'/\\n}"'"
                  }
                ]
              }')
            
            # Extract and display analysis
            ANALYSIS=$(echo "$CLAUDE_RESPONSE" | jq -r '.content[0].text' 2>/dev/null)
            
            if [ -z "$ANALYSIS" ] || [ "$ANALYSIS" = "null" ]; then
              echo "‚ùå Error getting analysis from Claude API"
              echo "$CLAUDE_RESPONSE" | jq '.'
            else
              echo "## ü§ñ Claude Analysis"
              echo "$ANALYSIS"
            fi
            
          elif [ -n "$OPENAI_API_KEY" ]; then
            echo "Using OpenAI Chat Completions API for analysis..."
            
            # Call OpenAI Chat Completions API with single call
            GPT_RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "model": "gpt-4o",
                "messages": [
                  {
                    "role": "system", 
                    "content": "'"$SYSTEM_PROMPT"'"
                  },
                  {
                    "role": "user",
                    "content": "'"${ERROR_CONTEXT//$'\n'/\\n}"'"
                  }
                ],
                "max_tokens": 1000
              }')
            
            # Extract and display the analysis
            ANALYSIS=$(echo "$GPT_RESPONSE" | jq -r '.choices[0].message.content' 2>/dev/null)
            
            if [ -z "$ANALYSIS" ] || [ "$ANALYSIS" = "null" ]; then
              echo "‚ùå Error getting analysis from OpenAI API"
              echo "$GPT_RESPONSE" | jq '.'
            else
              echo "## ü§ñ ChatGPT Analysis"
              echo "$ANALYSIS"
            fi
            
          else
            echo "Using fallback analysis (no AI API keys found)..."
            echo "## ‚ö†Ô∏è Build Failure"
            echo "The build process failed. Please check the logs above for specific error messages."
            echo "To enable AI-powered error analysis, add either ANTHROPIC_API_KEY or OPENAI_API_KEY to your repository secrets."
          fi
