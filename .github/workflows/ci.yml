name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Analyze failure with GPT
      if: failure()
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ASSISTANT_ID: ${{ secrets.ASSISTANT_ID }}
      run: |
        echo "Running GPT analysis..."
        mkdir -p gpt_logs
        echo "Restore step failed. See if GPT can help..." > gpt_logs/gpt_input.txt

        THREAD_RESPONSE=$(curl -s -X POST https://api.openai.com/v1/threads \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $OPENAI_API_KEY" \
          -H "OpenAI-Beta: assistants=v2" \
          -d '{}')

        THREAD_ID=$(echo "$THREAD_RESPONSE" | jq -r '.id')

        RUN_RESPONSE=$(curl -s -X POST https://api.openai.com/v1/threads/$THREAD_ID/runs \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $OPENAI_API_KEY" \
          -H "OpenAI-Beta: assistants=v2" \
          -d '{"assistant_id": "'$ASSISTANT_ID'", "instructions": "You are an AI DevOps assistant. Help analyze CI/CD logs from GitHub Actions and explain errors clearly. Suggest what might have gone wrong and how to fix it."}')

        RUN_ID=$(echo "$RUN_RESPONSE" | jq -r '.id')

        echo "Thread ID: $THREAD_ID" >> gpt_logs/gpt_output.txt
        echo "Run ID: $RUN_ID" >> gpt_logs/gpt_output.txt

        for i in {1..30}; do
          STATUS_RESPONSE=$(curl -s -X GET https://api.openai.com/v1/threads/$THREAD_ID/runs/$RUN_ID \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2")

          RUN_STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status')

          echo "Run status: $RUN_STATUS" >> gpt_logs/gpt_output.txt

          if [[ "$RUN_STATUS" == "completed" ]]; then
            break
          elif [[ "$RUN_STATUS" == "failed" ]]; then
            echo "GPT analysis failed." >> gpt_logs/gpt_output.txt
            exit 1
          fi

          sleep 2
        done

        if [[ "$RUN_STATUS" != "completed" ]]; then
          echo "GPT analysis timed out." >> gpt_logs/gpt_output.txt
          exit 1
        fi

        MESSAGES_RESPONSE=$(curl -s -X GET https://api.openai.com/v1/threads/$THREAD_ID/messages \
          -H "Authorization: Bearer $OPENAI_API_KEY" \
          -H "OpenAI-Beta: assistants=v2")

        echo "$MESSAGES_RESPONSE" | jq -r '.data[].content[].text.value' >> gpt_logs/gpt_output.txt

    - name: Upload GPT Analysis Artifact
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: gpt-analysis
        path: gpt_logs/gpt_output.txt
