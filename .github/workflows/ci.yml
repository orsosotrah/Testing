name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Set up job
      run: echo "Start Job"

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Analyze failure with GPT
      if: failure()
      run: |
        set -x
        echo "Running GPT analysis..."

        export RESPONSE=$(curl -sS -X POST https://api.openai.com/v1/threads \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -H "OpenAI-Beta: assistants=v2" \
          -H "Content-Type: application/json" \
          -d '{}' || true)

        echo "THREAD RESPONSE: $RESPONSE"

        THREAD_ID=$(echo "$RESPONSE" | jq -r '.id')

        export RUN_RESPONSE=$(curl -sS -X POST https://api.openai.com/v1/threads/$THREAD_ID/runs \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -H "OpenAI-Beta: assistants=v2" \
          -H "Content-Type: application/json" \
          -d '{
                "assistant_id": "${{ secrets.ASSISTANT_ID }}",
                "instructions": "You are an AI DevOps assistant. You help analyze CI/CD logs from GitHub Actions and explain errors clearly. Suggest what might have gone wrong and how to fix it.",
                "tools": [{"type": "code_interpreter"}]
              }' || true)

        echo "RUN RESPONSE: $RUN_RESPONSE"

        RUN_ID=$(echo "$RUN_RESPONSE" | jq -r '.id')

        echo "Waiting for GPT run to complete..."
        while true; do
          STATUS_RESPONSE=$(curl -sS -X GET https://api.openai.com/v1/threads/$THREAD_ID/runs/$RUN_ID \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "OpenAI-Beta: assistants=v2" || true)

          STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status')

          if [[ "$STATUS" == "completed" ]]; then
            break
          elif [[ "$STATUS" == "failed" ]]; then
            echo "GPT run failed"
            exit 1
          fi

          sleep 5
        done

        echo "Fetching GPT analysis..."
        curl -sS -X GET https://api.openai.com/v1/threads/$THREAD_ID/messages \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -H "OpenAI-Beta: assistants=v2" \
        | jq -r '.data[0].content[0].text.value'

    - name: Upload GPT Analysis Artifact
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: gpt-analysis
        path: gpt_output.txt

    - name: Post Setup .NET
      run: echo "Finished setting up .NET"

    - name: Post Checkout repository
      run: echo "Checked out repository"

    - name: Complete job
      run: echo "Job complete"
