name: Dynamic CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      
      # Find solution/project files
      - name: Find solution files
        run: |
          echo "Mencari solusi dan project files..."
          find . -name "*.sln" -o -name "*.csproj" > project_files.txt
          
      # Restore dependencies
      - name: Restore dependencies
        run: |
          # Cek apakah ada file solution
          if ls *.sln 1> /dev/null 2>&1; then
            echo "Solution file ditemukan"
            dotnet restore
          # Cek apakah ada file project
          elif ls *.csproj 1> /dev/null 2>&1; then
            echo "Project file ditemukan di direktori root"
            dotnet restore
          # Cari file solution/project di subdirektori
          elif [ -s project_files.txt ]; then
            echo "Menggunakan file project/solution yang ditemukan"
            PROJECT_FILE=$(head -n 1 project_files.txt)
            echo "Menggunakan file: $PROJECT_FILE"
            dotnet restore "$PROJECT_FILE"
          else
            echo "KESALAHAN: Tidak dapat menemukan project atau solution file"
            exit 1
          fi
      
      # Build project
      - name: Build
        run: |
          # Pilih project file yang sesuai
          if [ -s project_files.txt ]; then
            PROJECT_FILE=$(head -n 1 project_files.txt)
            echo "Membangun project: $PROJECT_FILE"
            dotnet build "$PROJECT_FILE" --no-restore -v m > build_output.log 2>&1
          else
            # Coba build di direktori saat ini
            if ls *.sln 1> /dev/null 2>&1 || ls *.csproj 1> /dev/null 2>&1; then
              echo "Membangun project di direktori saat ini"
              dotnet build --no-restore -v m > build_output.log 2>&1
            else
              echo "KESALAHAN: Tidak dapat menemukan file untuk build" > build_output.log
              exit 1
            fi
          fi
          
          # Check build result
          if grep -q "Build succeeded" build_output.log; then
            echo "Build berhasil"
          else
            echo "Build gagal"
            exit 1
          fi
      
      # Test project
      - name: Test
        run: |
          # Pilih project file yang sesuai
          if [ -s project_files.txt ]; then
            PROJECT_FILE=$(head -n 1 project_files.txt)
            dotnet test "$PROJECT_FILE" --no-build --verbosity normal || true
          else
            if ls *.sln 1> /dev/null 2>&1 || ls *.csproj 1> /dev/null 2>&1; then
              dotnet test --no-build --verbosity normal || true
            fi
          fi

      # Create minimal error log
      - name: Create error log file
        if: failure()
        run: |
          # Buat error log minimal
          echo "## Build Failure Log" > error_log.txt
          echo "Error occurred during the build process." >> error_log.txt
          echo "" >> error_log.txt
          
          # Extract C# errors
          if [ -f build_output.log ]; then
            # Tambahkan error CS dan status build
            grep -E "error CS[0-9]+|Build FAILED|Error\(s\)" build_output.log >> error_log.txt 2>/dev/null || echo "No specific errors found" >> error_log.txt
            
            # Tambahkan kode bermasalah
            for cs_file in $(grep -o "[^ ]*\.cs[^:]*" build_output.log | sort -u); do
              if [ -f "$cs_file" ]; then
                echo -e "\n## Problematic Code in $cs_file" >> error_log.txt
                head -n 20 "$cs_file" >> error_log.txt
                echo "..." >> error_log.txt
                break  # Batasi hanya 1 file untuk menjaga log tetap minimal
              fi
            done
          fi

      # Analyze with Claude
      - name: Analyze failure with Claude
        if: failure() && env.ANTHROPIC_API_KEY != ''
        continue-on-error: true
        run: |
          ERROR_CONTENT=$(cat error_log.txt)
          
          # Create request
          cat > request.json << 'EOF'
          {
            "model": "claude-3-5-haiku-20241022",
            "max_tokens": 1000,
            "system": "Kamu adalah asisten AI DevOps. Analisis log CI/CD dan jelaskan secara ringkas apa yang salah dan cara memperbaikinya.",
            "messages": [
              {
                "role": "user",
                "content": 
          EOF
          
          # Append error content
          echo "$ERROR_CONTENT" | jq -Rs '.' >> request.json
          
          # Close JSON
          cat >> request.json << 'EOF'
              }
            ]
          }
          EOF
          
          # Call Claude API
          CLAUDE_RESPONSE=$(curl -s -v --max-time 30 -X POST https://api.anthropic.com/v1/messages \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d @request.json 2>claude_request.log)
            
          # Save request and response to debug log
          echo "Request sent to Claude:" > claude_debug.log
          cat request.json >> claude_debug.log
          echo -e "\n\nResponse:" >> claude_debug.log
          echo "$CLAUDE_RESPONSE" >> claude_debug.log
          
          # Display analysis
          echo "Claude Analysis:"
          if [[ -z "$CLAUDE_RESPONSE" ]]; then
            echo "Analysis not available: (Empty API response)"
          elif echo "$CLAUDE_RESPONSE" | jq -e '.error' > /dev/null; then
            ERROR_TYPE=$(echo "$CLAUDE_RESPONSE" | jq -r '.error.type // "unknown_error"')
            ERROR_MESSAGE=$(echo "$CLAUDE_RESPONSE" | jq -r '.error.message // "No message"')
            echo "Analysis not available: (API Error: $ERROR_TYPE - $ERROR_MESSAGE)"
          else
            echo "$CLAUDE_RESPONSE" | jq -r '.content[0].text // "Analysis not available: (Response format error)"'
          fi

      # Analyze with ChatGPT
      - name: Analyze failure with ChatGPT
        if: failure() && env.OPENAI_API_KEY != '' 
        continue-on-error: true
        run: |
          ERROR_CONTENT=$(cat error_log.txt)
          
          # Create request
          cat > request.json << 'EOF'
          {
            "model": "gpt-4o-mini",
            "messages": [
              {
                "role": "system",
                "content": "Kamu adalah asisten AI DevOps. Analisis log CI/CD dan jelaskan secara ringkas apa yang salah dan cara memperbaikinya."
              },
              {
                "role": "user",
                "content": 
          EOF
          
          # Append error content
          echo "$ERROR_CONTENT" | jq -Rs '.' >> request.json
          
          # Close JSON
          cat >> request.json << 'EOF'
              }
            ],
            "max_tokens": 1000,
            "temperature": 0
          }
          EOF
          
          # Call OpenAI API
          CHATGPT_RESPONSE=$(curl -s -v --max-time 30 -X POST https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @request.json 2>chatgpt_request.log)
            
          # Save request and response to debug log
          echo "Request sent to ChatGPT:" > chatgpt_debug.log
          cat request.json >> chatgpt_debug.log
          echo -e "\n\nResponse:" >> chatgpt_debug.log
          echo "$CHATGPT_RESPONSE" >> chatgpt_debug.log
          
          # Display analysis
          echo "ChatGPT Analysis:"
          if [[ -z "$CHATGPT_RESPONSE" ]]; then
            echo "Analysis not available: (Empty API response)"
          elif echo "$CHATGPT_RESPONSE" | jq -e '.error' > /dev/null; then
            ERROR_TYPE=$(echo "$CHATGPT_RESPONSE" | jq -r '.error.type // "unknown_error"')
            ERROR_MESSAGE=$(echo "$CHATGPT_RESPONSE" | jq -r '.error.message // "No message"')
            echo "Analysis not available: (API Error: $ERROR_TYPE - $ERROR_MESSAGE)"
          else
            echo "$CHATGPT_RESPONSE" | jq -r '.choices[0].message.content // "Analysis not available: (Response format error)"'
          fi
      
      # Upload logs as artifacts
      - name: Upload error logs as artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs
          path: |
            error_log.txt
            claude_debug.log
            chatgpt_debug.log
            **/*.trx
          if-no-files-found: warn
